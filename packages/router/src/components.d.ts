/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Rindo compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLRindoElement, JSXBase } from '@rindo/core/internal';
import {
  HistoryType,
  LocationSegments,
  MatchResults,
  Path,
  Prompt,
  RouteRenderProps,
  RouterHistory,
  RouteViewOptions,
} from './global/interfaces';

export namespace Components {
  interface RindoAsyncContent {
    'documentLocation'?: string;
  }
  interface RindoRoute {
    'component'?: string;
    'componentProps'?: { [key: string]: any };
    'componentUpdated'?: (options: RouteViewOptions) => void;
    'exact': boolean;
    'group': string | null;
    'history'?: RouterHistory;
    'historyType'?: HistoryType;
    'location'?: LocationSegments;
    'match': MatchResults | null;
    'routeRender'?: (props: RouteRenderProps) => any;
    'routeViewsUpdated'?: (options: RouteViewOptions) => void;
    'scrollTopOffset'?: number;
    'url'?: string | string[];
  }
  interface RindoRouteLink {
    'activeClass': string;
    'anchorClass'?: string;
    'anchorId'?: string;
    'anchorRole'?: string;
    'anchorTabIndex'?: string;
    'anchorTitle'?: string;
    'ariaHaspopup'?: string;
    'ariaLabel'?: string;
    'ariaPosinset'?: string;
    'ariaSetsize'?: number;
    /**
    * Custom tag to use instead of an anchor
    */
    'custom': string;
    'exact': boolean;
    'history'?: RouterHistory;
    'location'?: LocationSegments;
    'root'?: string;
    'strict': boolean;
    'url'?: string;
    'urlMatch'?: Path;
  }
  interface RindoRouteSwitch {
    'group': string;
    'location'?: LocationSegments;
    'routeViewsUpdated'?: (options: RouteViewOptions) => void;
    'scrollTopOffset'?: number;
  }
  interface RindoRouteTitle {
    'pageTitle': string;
    'titleSuffix': string;
  }
  interface RindoRouter {
    'historyType': HistoryType;
    'root': string;
    'scrollTopOffset'?: number;
    'titleSuffix': string;
  }
  interface RindoRouterPrompt {
    'history'?: RouterHistory;
    'message': string | Prompt;
    'when': boolean;
  }
  interface RindoRouterRedirect {
    'history'?: RouterHistory;
    'root'?: string;
    'url'?: string;
  }
}

declare global {


  interface HTMLRindoAsyncContentElement extends Components.RindoAsyncContent, HTMLRindoElement {}
  var HTMLRindoAsyncContentElement: {
    prototype: HTMLRindoAsyncContentElement;
    new (): HTMLRindoAsyncContentElement;
  };

  interface HTMLRindoRouteElement extends Components.RindoRoute, HTMLRindoElement {}
  var HTMLRindoRouteElement: {
    prototype: HTMLRindoRouteElement;
    new (): HTMLRindoRouteElement;
  };

  interface HTMLRindoRouteLinkElement extends Components.RindoRouteLink, HTMLRindoElement {}
  var HTMLRindoRouteLinkElement: {
    prototype: HTMLRindoRouteLinkElement;
    new (): HTMLRindoRouteLinkElement;
  };

  interface HTMLRindoRouteSwitchElement extends Components.RindoRouteSwitch, HTMLRindoElement {}
  var HTMLRindoRouteSwitchElement: {
    prototype: HTMLRindoRouteSwitchElement;
    new (): HTMLRindoRouteSwitchElement;
  };

  interface HTMLRindoRouteTitleElement extends Components.RindoRouteTitle, HTMLRindoElement {}
  var HTMLRindoRouteTitleElement: {
    prototype: HTMLRindoRouteTitleElement;
    new (): HTMLRindoRouteTitleElement;
  };

  interface HTMLRindoRouterElement extends Components.RindoRouter, HTMLRindoElement {}
  var HTMLRindoRouterElement: {
    prototype: HTMLRindoRouterElement;
    new (): HTMLRindoRouterElement;
  };

  interface HTMLRindoRouterPromptElement extends Components.RindoRouterPrompt, HTMLRindoElement {}
  var HTMLRindoRouterPromptElement: {
    prototype: HTMLRindoRouterPromptElement;
    new (): HTMLRindoRouterPromptElement;
  };

  interface HTMLRindoRouterRedirectElement extends Components.RindoRouterRedirect, HTMLRindoElement {}
  var HTMLRindoRouterRedirectElement: {
    prototype: HTMLRindoRouterRedirectElement;
    new (): HTMLRindoRouterRedirectElement;
  };
  interface HTMLElementTagNameMap {
    'rindo-async-content': HTMLRindoAsyncContentElement;
    'rindo-route': HTMLRindoRouteElement;
    'rindo-route-link': HTMLRindoRouteLinkElement;
    'rindo-route-switch': HTMLRindoRouteSwitchElement;
    'rindo-route-title': HTMLRindoRouteTitleElement;
    'rindo-router': HTMLRindoRouterElement;
    'rindo-router-prompt': HTMLRindoRouterPromptElement;
    'rindo-router-redirect': HTMLRindoRouterRedirectElement;
  }
}

declare namespace LocalJSX {
  interface RindoAsyncContent {
    'documentLocation'?: string;
  }
  interface RindoRoute {
    'component'?: string;
    'componentProps'?: { [key: string]: any };
    'componentUpdated'?: (options: RouteViewOptions) => void;
    'exact'?: boolean;
    'group'?: string | null;
    'history'?: RouterHistory;
    'historyType'?: HistoryType;
    'location'?: LocationSegments;
    'match'?: MatchResults | null;
    'routeRender'?: (props: RouteRenderProps) => any;
    'routeViewsUpdated'?: (options: RouteViewOptions) => void;
    'scrollTopOffset'?: number;
    'url'?: string | string[];
  }
  interface RindoRouteLink {
    'activeClass'?: string;
    'anchorClass'?: string;
    'anchorId'?: string;
    'anchorRole'?: string;
    'anchorTabIndex'?: string;
    'anchorTitle'?: string;
    'ariaHaspopup'?: string;
    'ariaLabel'?: string;
    'ariaPosinset'?: string;
    'ariaSetsize'?: number;
    /**
    * Custom tag to use instead of an anchor
    */
    'custom'?: string;
    'exact'?: boolean;
    'history'?: RouterHistory;
    'location'?: LocationSegments;
    'root'?: string;
    'strict'?: boolean;
    'url'?: string;
    'urlMatch'?: Path;
  }
  interface RindoRouteSwitch {
    'group'?: string;
    'location'?: LocationSegments;
    'routeViewsUpdated'?: (options: RouteViewOptions) => void;
    'scrollTopOffset'?: number;
  }
  interface RindoRouteTitle {
    'pageTitle'?: string;
    'titleSuffix'?: string;
  }
  interface RindoRouter {
    'historyType'?: HistoryType;
    'root'?: string;
    'scrollTopOffset'?: number;
    'titleSuffix'?: string;
  }
  interface RindoRouterPrompt {
    'history'?: RouterHistory;
    'message'?: string | Prompt;
    'when'?: boolean;
  }
  interface RindoRouterRedirect {
    'history'?: RouterHistory;
    'root'?: string;
    'url'?: string;
  }

  interface IntrinsicElements {
    'rindo-async-content': RindoAsyncContent;
    'rindo-route': RindoRoute;
    'rindo-route-link': RindoRouteLink;
    'rindo-route-switch': RindoRouteSwitch;
    'rindo-route-title': RindoRouteTitle;
    'rindo-router': RindoRouter;
    'rindo-router-prompt': RindoRouterPrompt;
    'rindo-router-redirect': RindoRouterRedirect;
  }
}

export { LocalJSX as JSX };


declare module "@rindo/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'rindo-async-content': LocalJSX.RindoAsyncContent & JSXBase.HTMLAttributes<HTMLRindoAsyncContentElement>;
      'rindo-route': LocalJSX.RindoRoute & JSXBase.HTMLAttributes<HTMLRindoRouteElement>;
      'rindo-route-link': LocalJSX.RindoRouteLink & JSXBase.HTMLAttributes<HTMLRindoRouteLinkElement>;
      'rindo-route-switch': LocalJSX.RindoRouteSwitch & JSXBase.HTMLAttributes<HTMLRindoRouteSwitchElement>;
      'rindo-route-title': LocalJSX.RindoRouteTitle & JSXBase.HTMLAttributes<HTMLRindoRouteTitleElement>;
      'rindo-router': LocalJSX.RindoRouter & JSXBase.HTMLAttributes<HTMLRindoRouterElement>;
      'rindo-router-prompt': LocalJSX.RindoRouterPrompt & JSXBase.HTMLAttributes<HTMLRindoRouterPromptElement>;
      'rindo-router-redirect': LocalJSX.RindoRouterRedirect & JSXBase.HTMLAttributes<HTMLRindoRouterRedirectElement>;
    }
  }
}


